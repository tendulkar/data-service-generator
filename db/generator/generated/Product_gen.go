// Code generated by platform; DO NOT EDIT.

package inventory

import (
	"database/sql"
	"fmt"
	"time"
)

type Product struct {
	sku string
	name string
	price float
	quantity int
}

type ProductDB struct {
	db *sql.DB
	preparedCache map[string]*sql.Stmt
}

func prepareAndCacheQuery(db *ProductDB, queryName string, query string) error {
	stmt, err := db.db.Prepare(query)
	if err != nil {
		return err
	}
	db.preparedCache[queryName] = stmt
	
	return nil
}

func setupProductDB(db *ProductDB) error {
	FindProductBySkuQuery := `SELECT sku, name, price, quantity FROM Product WHERE sku = $1`
	prepareAndCacheQuery(db, "FindProductBySku", FindProductBySkuQuery)
	UpdateProductPriceAndQuantityBySkuQuery := `UPDATE Product SET price = $1, quantity = $2 WHERE sku = $1`
	prepareAndCacheQuery(db, "UpdateProductPriceAndQuantityBySku", UpdateProductPriceAndQuantityBySkuQuery)
	AddNewProductQuery := `INSERT INTO Product (sku, name, price, quantity) VALUES ($1, $2, $3, $4) RETURNING id`
	prepareAndCacheQuery(db, "AddNewProduct", AddNewProductQuery)
	AddOrReplaceProductQuery := `INSERT INTO Product (sku, name, price, quantity) VALUES ($1, $2, $3, $4) ON CONFLICT DO UPDATE SET sku = $1, name = $2, price = $3, quantity = $4 RETURNING id, (xmax = 0)`
	prepareAndCacheQuery(db, "AddOrReplaceProduct", AddOrReplaceProductQuery)
	DeleteProductBySkuQuery := `DELETE FROM Product WHERE sku = $1`
	prepareAndCacheQuery(db, "DeleteProductBySku", DeleteProductBySkuQuery)
}

// Generated access functions
func FindProductBySku(db *sql.DB, request *AccessConfig) ([]Product, error) {
	stmt := preparedCache["FindProductBySku"]
	rows, err := stmt.Query()
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []Product
	for rows.Next() {
		var item Product
		err := rows.Scan(&item.sku, &item.name, &item.price, &item.quantity)
		if err != nil {
			return nil, err
		}
		results = append(results, item)
	}
	return results, nil
}
func UpdateProductPriceAndQuantityBySku(db *sql.DB, request *AccessConfig) (int64, error) {

	stmt := preparedCache["UpdateProductPriceAndQuantityBySku"]	
	result, err := stmt.Exec()
	if err != nil {
		return 0, err
	}
	rowsAffected, err := result.RowsAffected()
	return rowsAffected, err
}
func AddNewProduct(db *sql.DB, request *AccessConfig) (int64, error) {
	stmt := preparedCache["AddNewProduct"]

	var id int64
	err = stmt.QueryRow().Scan(&id)
	return id, err
}
func AddOrReplaceProduct(db *sql.DB, request *AccessConfig) (int64, bool, error) {
	stmt := preparedCache["AddOrReplaceProduct"]
	var id int64
	var inserted bool
	err = stmt.QueryRow().Scan(&id, &inserted)
	return id, inserted, err
}
func DeleteProductBySku(db *sql.DB, request *AccessConfig) error {
	stmt := preparedCache["DeleteProductBySku"]
	_, err = stmt.Exec()
	return err
}
